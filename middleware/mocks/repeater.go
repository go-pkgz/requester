// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"sync"
)

// RepeaterSvcMock is a mock implementation of middleware.RepeaterSvc.
//
//	func TestSomethingThatUsesRepeaterSvc(t *testing.T) {
//
//		// make and configure a mocked middleware.RepeaterSvc
//		mockedRepeaterSvc := &RepeaterSvcMock{
//			DoFunc: func(ctx context.Context, fun func() error, errs ...error) error {
//				panic("mock out the Do method")
//			},
//		}
//
//		// use mockedRepeaterSvc in code that requires middleware.RepeaterSvc
//		// and then make assertions.
//
//	}
type RepeaterSvcMock struct {
	// DoFunc mocks the Do method.
	DoFunc func(ctx context.Context, fun func() error, errs ...error) error

	// calls tracks calls to the methods.
	calls struct {
		// Do holds details about calls to the Do method.
		Do []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Fun is the fun argument value.
			Fun func() error
			// Errs is the errs argument value.
			Errs []error
		}
	}
	lockDo sync.RWMutex
}

// Do calls DoFunc.
func (mock *RepeaterSvcMock) Do(ctx context.Context, fun func() error, errs ...error) error {
	if mock.DoFunc == nil {
		panic("RepeaterSvcMock.DoFunc: method is nil but RepeaterSvc.Do was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Fun  func() error
		Errs []error
	}{
		Ctx:  ctx,
		Fun:  fun,
		Errs: errs,
	}
	mock.lockDo.Lock()
	mock.calls.Do = append(mock.calls.Do, callInfo)
	mock.lockDo.Unlock()
	return mock.DoFunc(ctx, fun, errs...)
}

// DoCalls gets all the calls that were made to Do.
// Check the length with:
//
//	len(mockedRepeaterSvc.DoCalls())
func (mock *RepeaterSvcMock) DoCalls() []struct {
	Ctx  context.Context
	Fun  func() error
	Errs []error
} {
	var calls []struct {
		Ctx  context.Context
		Fun  func() error
		Errs []error
	}
	mock.lockDo.RLock()
	calls = mock.calls.Do
	mock.lockDo.RUnlock()
	return calls
}

// ResetDoCalls reset all the calls that were made to Do.
func (mock *RepeaterSvcMock) ResetDoCalls() {
	mock.lockDo.Lock()
	mock.calls.Do = nil
	mock.lockDo.Unlock()
}

// ResetCalls reset all the calls that were made to all mocked methods.
func (mock *RepeaterSvcMock) ResetCalls() {
	mock.lockDo.Lock()
	mock.calls.Do = nil
	mock.lockDo.Unlock()
}
